// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockAnalyse.Api.Data;

#nullable disable

namespace StockAnalyse.Api.Migrations
{
    [DbContext(typeof(StockDbContext))]
    partial class StockDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("StockAnalyse.Api.Models.AIModelConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubscribeEndpoint")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AIModelConfigs");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.AIPrompt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SystemPrompt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("AIPrompts");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.BacktestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AnnualizedReturn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DetailedResults")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FinalCapital")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InitialCapital")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxDrawdown")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SharpeRatio")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StrategyId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalReturn")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("WinRate")
                        .HasColumnType("TEXT");

                    b.Property<int>("WinningTrades")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId", "StartDate", "EndDate");

                    b.ToTable("BacktestResults");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.FinancialNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FetchTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StockCodes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FinancialNews");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.PriceAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTriggerPercent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTriggered")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TargetPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("TriggerTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PriceAlerts");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.QuantStrategy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentCapital")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InitialCapital")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastRunAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QuantStrategies");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.ScreenTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Market")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxChangePercent")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxCirculatingShares")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxDividendYield")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxMarketValue")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxPB")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxPE")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxTotalShares")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxTurnoverRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxVolume")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinChangePercent")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinCirculatingShares")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinDividendYield")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinMarketValue")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinPB")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinPE")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinTotalShares")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinTurnoverRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinVolume")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ScreenTemplates");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.SimulatedTrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Commission")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("StrategyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId", "StockCode", "ExecutedAt");

                    b.ToTable("SimulatedTrades");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.Stock", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ChangeAmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ChangePercent")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("HighPrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LowPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PB")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PE")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Turnover")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TurnoverRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.HasIndex("Code");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.StockHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Close")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("High")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Low")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Open")
                        .HasColumnType("TEXT");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Turnover")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StockCode", "TradeDate");

                    b.ToTable("StockHistories");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.TradingSignal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Confidence")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsExecuted")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("StrategyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId", "StockCode", "GeneratedAt");

                    b.ToTable("TradingSignals");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.WatchlistCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WatchlistCategories");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.WatchlistStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("HighAlertPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HighAlertSent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("LowAlertPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LowAlertSent")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ProfitLoss")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProfitLossPercent")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("StockCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("TEXT");

                    b.Property<int>("WatchlistCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StockCode");

                    b.HasIndex("WatchlistCategoryId");

                    b.ToTable("WatchlistStocks");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.BacktestResult", b =>
                {
                    b.HasOne("StockAnalyse.Api.Models.QuantStrategy", "Strategy")
                        .WithMany("BacktestResults")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.SimulatedTrade", b =>
                {
                    b.HasOne("StockAnalyse.Api.Models.QuantStrategy", "Strategy")
                        .WithMany("SimulatedTrades")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.StockHistory", b =>
                {
                    b.HasOne("StockAnalyse.Api.Models.Stock", "Stock")
                        .WithMany("Histories")
                        .HasForeignKey("StockCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.TradingSignal", b =>
                {
                    b.HasOne("StockAnalyse.Api.Models.QuantStrategy", "Strategy")
                        .WithMany("TradingSignals")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.WatchlistStock", b =>
                {
                    b.HasOne("StockAnalyse.Api.Models.Stock", "Stock")
                        .WithMany("Watchlists")
                        .HasForeignKey("StockCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockAnalyse.Api.Models.WatchlistCategory", "Category")
                        .WithMany("Stocks")
                        .HasForeignKey("WatchlistCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.QuantStrategy", b =>
                {
                    b.Navigation("BacktestResults");

                    b.Navigation("SimulatedTrades");

                    b.Navigation("TradingSignals");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.Stock", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Watchlists");
                });

            modelBuilder.Entity("StockAnalyse.Api.Models.WatchlistCategory", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
